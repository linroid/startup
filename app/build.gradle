apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

def buildTime = new Date().format("yyyy-MM-dd HH:mm", TimeZone.getTimeZone("GMT+8:00"))

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.linroid.gassist"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        versionCode versionMajor * 100 + versionMinor * 10 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
    }
    buildTypes {
        debug {
            applicationIdSuffix ".dev"
            versionNameSuffix '-dev'
            shrinkResources false
            minifyEnabled false
            zipAlignEnabled false
            signingConfig signingConfigs.debug
        }

        release {
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    signingConfigs {
        debug {
            storeFile file('../linroid_debug.jks')
            storePassword '12344321'
            keyAlias 'linroid_debug'
            keyPassword '12344321'
        }
    }

    dexOptions {
        javaMaxHeapSize "2048M"
    }

    compileOptions {
        incremental = true
    }

    lintOptions {
        disable 'InvalidPackage'
        disable 'MissingTranslation'
        abortOnError false
        checkReleaseBuilds false
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

File signPropFile = file('signing.properties');
if (signPropFile.exists()) {
    Properties signProps = new Properties()
    signProps.load(new FileInputStream(signPropFile))

    if (signProps.containsKey('STORE_FILE') && signProps.containsKey('STORE_PASSWORD') &&
            signProps.containsKey('KEY_ALIAS') && signProps.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(signProps['STORE_FILE'])
        android.signingConfigs.release.storePassword = signProps['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = signProps['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = signProps['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'

//    implementation "com.android.support:appcompat-v7:$support_version"
//    implementation "com.android.support:support-v4:$support_version"
    implementation "com.android.support:recyclerview-v7:$support_version"
//    implementation "com.android.support:design:$support_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
//    implementation "org.jetbrains.anko:anko:$anko_version"
    compile "org.jetbrains.anko:anko-sdk25:$anko_version"
    implementation "org.jetbrains.anko:anko-recyclerview-v7:$anko_version"
//    implementation "org.jetbrains.anko:anko-design:$anko_version"

//    // If you want to bind to Android-specific lifecycles
    implementation "com.trello.rxlifecycle2:rxlifecycle-android:$rxlifecycle_version"
//    // If you want pre-written Activities and Fragments you can subclass as providers
    implementation "com.trello.rxlifecycle2:rxlifecycle-components:$rxlifecycle_version"
//    // If you want to use Navi for providers
//    implementation "com.trello.rxlifecycle2:rxlifecycle-navi:$rxlifecycle_version"
//    // If you want to use Android Lifecycle for providers
//    implementation "com.trello.rxlifecycle2:rxlifecycle-android-lifecycle:$rxlifecycle_version"
//    // If you want to use Kotlin syntax
//    implementation "com.trello.rxlifecycle2:rxlifecycle-kotlin:$rxlifecycle_version"
//    // If you want to use Kotlin syntax with Android Lifecycle
//    implementation "com.trello.rxlifecycle2:rxlifecycle-android-lifecycle-kotlin:$rxlifecycle_version"

    compile 'com.github.clans:fab:1.6.4'
}
kotlin {
    experimental {
        coroutines "enable"
    }
}
